
//buildscript {
//    repositories {
//        mavenCentral()
//    }
//    dependencies {
//        classpath 'com.guardsquare:proguard-gradle:7.5.0'
//    }
//}
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id 'com.github.johnrengelman.shadow' version '8.1.1' // 添加shadow插件
//    id 'org.gretty' version '4.1.4'
}
// In build.gradle:
// This block is where your mappings version is also specified
//minecraft {
//    accessTransformers {
//        file('src/main/resources/META-INF/accesstransformer.cfg')
//    }
//}
version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    mavenCentral()
}


base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {

    client {
        // 设置运行后玩家的名称
        programArguments = ["--username", "3944Realms"]
    }
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')
        systemProperty('gradle.task', 'runData')
        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    localRuntime
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"
//    implementation "org.springframework.boot:spring-boot-starter:3.1.1"
//    implementation "org.springframework.boot:spring-boot-starter-web:3.1.1"
//    implementation "org.springframework.boot:spring-boot-starter-undertow:3.1.1"
//    implementation "org.springframework.boot:spring-boot-starter-websocket:3.1.1"
//    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.1'
    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    // localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
    localRunRuntime "io.netty:netty-codec-http:4.1.109.Final"
    localRunRuntime 'io.netty:netty-common:4.1.109.Final'


    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"
    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")
    implementation group: 'io.netty', name: 'netty-all', version: '4.1.109.Final'
    implementation 'io.netty:netty-codec-http:4.1.109.Final'
    implementation 'io.netty:netty-transport:4.1.109.Final'
    implementation 'io.netty:netty-common:4.1.109.Final'
    // https://mvnrepository.com/artifact/org.mozilla/rhino
    implementation group: 'org.mozilla', name: 'rhino', version: '1.7.15'

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    jarJar(group: 'io.netty',name: 'netty-all',version: netty_version) {
        version {
            strictly netty_version
        }
    }
    jarJar(group: 'io.netty',name: 'netty-codec-http',version: netty_version) {
        version {
            strictly netty_version
        }
    }
    jarJar(group:'software.bernie.geckolib', name:"geckolib-neoforge-${minecraft_version}", version:geckolib_version) {
        version {
            strictly geckolib_version
        }
    }
    jarJar(group: 'org.mozilla', name: 'rhino', version: '1.7.15') {
        version {
            strictly '1.7.15'
        }
    }

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}



// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}
//gretty {
//    httpPort = 9999
//    contextPath = "/web"
//    debugPort = 5005
//    debugSuspend = true
//    httpsEnabled = true
//    managedClassReload = true
////    servletContainer = 'undertow'
//    httpsPort = 10000
//}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
tasks.register('printDependenciesNames') {
    description "Print"
    doLast {
        configurations.runtimeClasspath.each { File file ->
            println(file.name)
        }
    }
}


tasks.register('copyDependencies', Copy) {
    def Libraries = configurations.runtimeClasspath.filter { file ->
        file.name.startsWith("geckolib")
    }
    from Libraries // 使用 runtimeClasspath 获取可解析的依赖
    into 'build/libs/modRunLib' // 这里可以是放置依赖的目录，比如模组的 libs 目录

}
// 在构建任务之前执行复制依赖任务
build.dependsOn(copyDependencies)
minecraft {
    accessTransformers.file("src/main/resources/META-INF/accesstransformer.cfg")
}
shadowJar {
    zip64 true
    archiveClassifier.set('')
    mergeServiceFiles()
//    transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
//        resource = 'META-INF/spring.factories'
//    }

    from('build/libs/modRunLib') {
        into 'META-INF/jarJar'
        include '**'
        includeEmptyDirs = false
    }

    duplicatesStrategy = 'warn'
//    manifest {
//        attributes 'Main-Class': 'com.r3944realms.whimsy.api.SpringBoot.DG_LAB.DG_LAB_WebSocket_SpringBootApplication'
//    }
}
//jar {
//    dependsOn 'copyDependencies' // 在打包 JAR 前执行复制依赖的任务
//
//    from('build/libs/modRunLib') {
//        into 'META-INF/jarJar'
//        // 可以根据需要指定要包含的文件或文件类型
//        include '**' //只包含所有的. 文件
//        includeEmptyDirs = false // 不包含空文件夹
//    }
//
//    duplicatesStrategy = 'warn' // 设置重复文件的处理策略
////    manifest {
////        attributes 'Main-Class': 'com.r3944realms.whimsy.api.SpringBoot.DG_LAB.DG_LAB_WebSocket_SpringBootApplication' // 替换成主类名
////    }
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:removal"
    options.compilerArgs << "-Xlint:unchecked"
}

jarJar.enable()
tasks.jarJar {
    archiveClassifier.set('neoforge')
}

//
//tasks.register('proguard', ProGuardTask) {
//    configuration file('proguard.pro')
//
//    injars(tasks.named('jar', Jar).flatMap { it.archiveFile })
//
//    // Automatically handle the Java version of this build.
//    if (System.getProperty('java.version').startsWith('1.')) {
//        // Before Java 9, the runtime classes were packaged in a single jar file.
//        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
//    } else {
//        // As of Java 9, the runtime classes are packaged in modular jmod files.
//        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
//        //libraryjars "${System.getProperty('java.home')}/jmods/....."
//    }
//
//    verbose
//
//    outjars(layout.buildDirectory.file("libs/${baseCoordinates}-minified.jar"))
//}
//jar {
//    zip64 true
//    duplicatesStrategy = 'exclude'
//    from {
//        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//    manifest {
//        attributes 'Main-Class': 'com.r3944realms.whimsy.WhimsyMod' // 替换成你的主类名
//    }
//}


test.enabled = false